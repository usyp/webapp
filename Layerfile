#This is an example webapp.io configuration for Docker!
FROM vm/ubuntu:18.04

# To note: Layerfiles create entire VMs, *not* containers!
SECRET ENV ARGO_AUTH
SECRET ENV ARGO_DOMAIN

# SECRET ENV CERT_DOMAIN

# SECRET ENV MAX_MEMORY_RESTART
# RUN echo "secret is: $MAX_MEMORY_RESTART"
# install the latest version of Docker, as in the official Docker installation tutorial.
RUN apt-get update && \
    apt-get install ca-certificates curl gnupg lsb-release && \
    sudo mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg && \
    echo \
    "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" |\
      sudo tee /etc/apt/sources.list.d/docker.list > /dev/null && \
    apt-get update && \
    apt-get install docker-ce docker-ce-cli containerd.io 
# copy files from the repository into this staging server
# COPY . .

# RUN docker build -t image .
RUN docker run -d -p 80:3000 --name container   \
    -e ARGO_AUTH=$ARGO_AUTH \ 
    -e ARGO_DOMAIN=$ARGO_DOMAIN  \

    ghcr.io/3kmfi6hp/argo-airport-paas:main

RUN docker ps -a

RUN BACKGROUND python3 -m http-server -p 8000
EXPOSE WEBSITE http://localhost:8000

# run the server
# RUN echo "hello world" && \
#     while true; do docker exec -it container curl -s http://localhost:3000/status; sleep 15; done && \
#     tail -f /dev/null



